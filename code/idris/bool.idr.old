module bool

import pair

data bool = true | false

-- Exam Problem #2: There are 2 possible ways to fill in the result column for
-- a truth table for a binary Boolean function, and there are thus exactly 16
-- such functions, and no more

id: bool -> bool
id b = b

not: bool -> bool
not true = false
not _  = true

constTrue: bool -> bool
constTrue _ = true

constFalse: bool -> bool
constFalse _ = false

-- given a pair of bool values, (a, b), return true if both a and b are true,
-- otherwise return false
-- 1:
andp: pair bool bool -> bool
andp (mkPair true true) = true
andp (mkPair (_) (_)) = false

-- given a pair of bool values, (a, b), return false if both a and b are false,
-- otherwise return true
-- 2:
orp: pair bool bool -> bool
orp (mkPair false false) = false
orp (mkPair (_) (_)) = true

-- short for "not and", given a pair of bool values, (a, b),
-- return false if both a and b are true, and true otherwise
-- 3:
nandp: pair bool bool -> bool
nandp (mkPair (n) (m)) = not (andp (mkPair n m))

-- short for "exclusive or", given a pair of bool values, (a, b),
-- return true if exactly one of a or b is true, and false otherwise
-- 4:
xorp: pair bool bool -> bool
xorp (mkPair true false) = true
xorp (mkPair false true) = true
xorp (mkPair (_) (_)) = false

-- binary functions, explicit

pand: bool -> bool -> bool
pand true = id_bool
pand false = constFalse

por: bool -> bool -> bool
por true = constTrue
por false = id_bool

pxor: bool -> bool -> bool
pxor true = not
pxor fales = id_bool

pnand: bool -> bool -> bool
pnand true = not
pnand false = constTrue

-- binary functions, implicit

and: bool -> bool -> bool
and true true = true
and _ _ = false

or: bool -> bool -> bool
or false false = false
or _ _ = true
